// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglikRE
double loglikRE(List CovRE, arma::vec REs, arma::uvec qvec, arma::uvec ni);
RcppExport SEXP _wglmm_loglikRE(SEXP CovRESEXP, SEXP REsSEXP, SEXP qvecSEXP, SEXP niSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< arma::vec >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ni(niSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikRE(CovRE, REs, qvec, ni));
    return rcpp_result_gen;
END_RCPP
}
// loglikCond
double loglikCond(arma::vec REs, arma::vec phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const arma::vec& weights, double scale);
RcppExport SEXP _wglmm_loglikCond(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP weightsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikCond(REs, phi, family, X, y, Z, weights, scale));
    return rcpp_result_gen;
END_RCPP
}
// loglikTot
double loglikTot(const arma::vec& REs, const arma::vec& phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, double scale);
RcppExport SEXP _wglmm_loglikTot(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikTot(REs, phi, family, X, y, Z, CovRE, weights, qvec, ni, scale));
    return rcpp_result_gen;
END_RCPP
}
// loglikCondImp
double loglikCondImp(const arma::mat& REs, arma::vec phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const arma::vec& weights, const arma::vec& weightsImp, double scale);
RcppExport SEXP _wglmm_loglikCondImp(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP weightsSEXP, SEXP weightsImpSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikCondImp(REs, phi, family, X, y, Z, weights, weightsImp, scale));
    return rcpp_result_gen;
END_RCPP
}
// loglikREImp
double loglikREImp(List CovRE, const arma::mat& REs, arma::uvec qvec, arma::uvec ni, const arma::vec& weightsImp);
RcppExport SEXP _wglmm_loglikREImp(SEXP CovRESEXP, SEXP REsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP weightsImpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikREImp(CovRE, REs, qvec, ni, weightsImp));
    return rcpp_result_gen;
END_RCPP
}
// loglikTotImp
double loglikTotImp(const arma::mat& REs, const arma::vec& phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, const arma::vec& weightsImp, double scale);
RcppExport SEXP _wglmm_loglikTotImp(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP weightsImpSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikTotImp(REs, phi, family, X, y, Z, CovRE, weights, qvec, ni, weightsImp, scale));
    return rcpp_result_gen;
END_RCPP
}
// GradientAll
arma::vec GradientAll(const arma::vec& REs, const arma::vec& phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, double scale);
RcppExport SEXP _wglmm_GradientAll(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(GradientAll(REs, phi, family, X, y, Z, CovRE, weights, qvec, ni, scale));
    return rcpp_result_gen;
END_RCPP
}
// GradientBetaImp
arma::vec GradientBetaImp(const arma::mat& REs, const arma::vec& phi, const String& family, arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const arma::vec& weights, const arma::vec& weightsImp, double scale);
RcppExport SEXP _wglmm_GradientBetaImp(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP weightsSEXP, SEXP weightsImpSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(GradientBetaImp(REs, phi, family, X, y, Z, weights, weightsImp, scale));
    return rcpp_result_gen;
END_RCPP
}
// HessianBetaImp
arma::mat HessianBetaImp(const arma::mat& REs, const arma::vec& phi, const String family, arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const arma::vec& weights, const arma::vec& weightsImp, double scale);
RcppExport SEXP _wglmm_HessianBetaImp(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP weightsSEXP, SEXP weightsImpSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(HessianBetaImp(REs, phi, family, X, y, Z, weights, weightsImp, scale));
    return rcpp_result_gen;
END_RCPP
}
// NewCoefImp
List NewCoefImp(const arma::mat& REs, arma::vec& phi, const String& family, arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const arma::vec& weights, const arma::vec& weightsImp, double tol, int MaxIt, double scale);
RcppExport SEXP _wglmm_NewCoefImp(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP weightsSEXP, SEXP weightsImpSEXP, SEXP tolSEXP, SEXP MaxItSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIt(MaxItSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(NewCoefImp(REs, phi, family, X, y, Z, weights, weightsImp, tol, MaxIt, scale));
    return rcpp_result_gen;
END_RCPP
}
// NewCovREImp
List NewCovREImp(const arma::mat& REs, const arma::uvec& qvec, const arma::uvec& ni, const arma::vec& weightsImp);
RcppExport SEXP _wglmm_NewCovREImp(SEXP REsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP weightsImpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weightsImp(weightsImpSEXP);
    rcpp_result_gen = Rcpp::wrap(NewCovREImp(REs, qvec, ni, weightsImp));
    return rcpp_result_gen;
END_RCPP
}
// ImportanceSampling
arma::mat ImportanceSampling(int MI, const arma::vec& modus, const arma::mat& Chol, arma::vec& phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, double scale);
RcppExport SEXP _wglmm_ImportanceSampling(SEXP MISEXP, SEXP modusSEXP, SEXP CholSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type MI(MISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type modus(modusSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Chol(CholSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(ImportanceSampling(MI, modus, Chol, phi, family, X, y, Z, CovRE, weights, qvec, ni, scale));
    return rcpp_result_gen;
END_RCPP
}
// GenModusNeu
List GenModusNeu(const arma::vec& REs, const arma::vec& phi, const String& family, const arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, double tol, int MaxIt, arma::mat Chol, double scale);
RcppExport SEXP _wglmm_GenModusNeu(SEXP REsSEXP, SEXP phiSEXP, SEXP familySEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP tolSEXP, SEXP MaxItSEXP, SEXP CholSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type REs(REsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIt(MaxItSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Chol(CholSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(GenModusNeu(REs, phi, family, X, y, Z, CovRE, weights, qvec, ni, tol, MaxIt, Chol, scale));
    return rcpp_result_gen;
END_RCPP
}
// wlmm_transform_cpp
List wlmm_transform_cpp(const arma::vec& phi, const String& transform, arma::mat& X, const arma::vec& y, const arma::sp_mat& Z, const List& CovRE, const arma::vec& weights, const arma::uvec& qvec, const arma::uvec& ni, double scale, double lambda, int MI, int iter1, int iter2, double tol1, double tol2, bool trace, int nDecrease);
RcppExport SEXP _wglmm_wlmm_transform_cpp(SEXP phiSEXP, SEXP transformSEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP CovRESEXP, SEXP weightsSEXP, SEXP qvecSEXP, SEXP niSEXP, SEXP scaleSEXP, SEXP lambdaSEXP, SEXP MISEXP, SEXP iter1SEXP, SEXP iter2SEXP, SEXP tol1SEXP, SEXP tol2SEXP, SEXP traceSEXP, SEXP nDecreaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const String& >::type transform(transformSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type CovRE(CovRESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type qvec(qvecSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type MI(MISEXP);
    Rcpp::traits::input_parameter< int >::type iter1(iter1SEXP);
    Rcpp::traits::input_parameter< int >::type iter2(iter2SEXP);
    Rcpp::traits::input_parameter< double >::type tol1(tol1SEXP);
    Rcpp::traits::input_parameter< double >::type tol2(tol2SEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type nDecrease(nDecreaseSEXP);
    rcpp_result_gen = Rcpp::wrap(wlmm_transform_cpp(phi, transform, X, y, Z, CovRE, weights, qvec, ni, scale, lambda, MI, iter1, iter2, tol1, tol2, trace, nDecrease));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wglmm_loglikRE", (DL_FUNC) &_wglmm_loglikRE, 4},
    {"_wglmm_loglikCond", (DL_FUNC) &_wglmm_loglikCond, 8},
    {"_wglmm_loglikTot", (DL_FUNC) &_wglmm_loglikTot, 11},
    {"_wglmm_loglikCondImp", (DL_FUNC) &_wglmm_loglikCondImp, 9},
    {"_wglmm_loglikREImp", (DL_FUNC) &_wglmm_loglikREImp, 5},
    {"_wglmm_loglikTotImp", (DL_FUNC) &_wglmm_loglikTotImp, 12},
    {"_wglmm_GradientAll", (DL_FUNC) &_wglmm_GradientAll, 11},
    {"_wglmm_GradientBetaImp", (DL_FUNC) &_wglmm_GradientBetaImp, 9},
    {"_wglmm_HessianBetaImp", (DL_FUNC) &_wglmm_HessianBetaImp, 9},
    {"_wglmm_NewCoefImp", (DL_FUNC) &_wglmm_NewCoefImp, 11},
    {"_wglmm_NewCovREImp", (DL_FUNC) &_wglmm_NewCovREImp, 4},
    {"_wglmm_ImportanceSampling", (DL_FUNC) &_wglmm_ImportanceSampling, 13},
    {"_wglmm_GenModusNeu", (DL_FUNC) &_wglmm_GenModusNeu, 14},
    {"_wglmm_wlmm_transform_cpp", (DL_FUNC) &_wglmm_wlmm_transform_cpp, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_wglmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
